version: '3.8'

services:
  postgres:
    image: postgres:13.10-alpine
    container_name: foodgram-database
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
  
  api:
    build:
      context: ../backend/
      dockerfile: Dockerfile
    container_name: foodgram-api
    restart: always
    ports:
      - "8000:8000"  
    depends_on:
      - postgres
    volumes:
      - static_volume:/app/static/
      - media_volume:/app/media/
      - ../data:/app/data
    env_file:
      - ./.env
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - INGREDIENTS_FILE_PATH=/app/data/ingredients.json
    command: >
      bash -c "python manage.py makemigrations &&
              python manage.py migrate &&
              gunicorn foodgram.wsgi:application --bind 0.0.0.0:8000"
  
  web-client:
    build:
      context: ../frontend/
    container_name: foodgram-client
    volumes:
      - ../frontend:/app
      - frontend_dist:/usr/share/nginx/html
    working_dir: /app
    command: >
      sh -c "
        npm install --legacy-peer-deps &&
        npm run build &&
        cp -r build/* /usr/share/nginx/html/
      "
  
  web-server:
    image: nginx:1.21.3-alpine
    container_name: foodgram-nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api
      - web-client
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_dist:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - static_volume:/var/html/static/
      - media_volume:/var/html/media/

volumes:
  postgres_volume:
    name: foodgram-postgres-data
  static_volume:
    name: foodgram-static-files
  media_volume:
    name: foodgram-media-files
  frontend_dist:
    name: foodgram-frontend-build